@using Microsoft.AspNetCore.Identity
@model Blog.Web.Models.ViewModels.BlogDetailsViewModel
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    ViewData["Title"] = Model.PageTitle;    
}

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-12 col-lg-6">
            @if (Model != null)
            {
                <h1 class="mb-3">@Model.Heading</h1>
                <div class="d-flex justify-content-between mb-3">
                    <span class="text-secondary">@Model.Author</span>
                    <span class="text-secondary">@Model.PublishedDate.ToShortDateString()</span>
                </div>
                
                <div class="mb-3">
                    @if (SignInManager.IsSignedIn(User))
                    {
                        @if (Model.Liked)
                        {
                            <a style="cursor: pointer; ">
                                <i class="bi bi-hand-thumbs-up-fill"></i>
                            </a>    
                        }
                        else
                        {
                            <a id="btnLike" style="cursor: pointer; ">
                                <i class="bi bi-hand-thumbs-up"></i>
                            </a>
                        }
                    }
               
                    <span id="totalLikes">@Model.TotalLikes</span> likes
                </div>
                
                <div class="mb-3 d-flex">
                    @foreach (var tag in @Model.Tags)
                    {
                        <span class="badge bg-secondary me-1">@tag.Name</span>
                    }
                </div>
                
                <img src="@Model.FeaturedImageUrl" class="d-block img-fluid mb-3"/>
                                                                                 
                <div class="mb-3 blog-details-content">
                    @Html.Raw(Model.Content)
                </div>
            }
            else
            {
                <p>Blog Post not found!</p>
            }
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        const btnLikeElement = document.getElementById('btnLike');
        const totalLikesElement = document.getElementById('totalLikes');
        
        async function getTotalLikes() {
            await fetch('api/BlogPostLike/@Model.Id/totalLikes', {
                method: 'GET',
                headers: {
                     'Content-Type': 'application/json',
                     'Accept' : '*/*'
                }                                         
            }).then(data => data.json())
            .then(result => totalLikesElement.innerHTML = result);
        }
        
        async function addLikeForBlog()
        {
            await fetch('api/BlogPostLike/Add', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept' : '*/*'
                },
                body: JSON.stringify({
                    blogPostId: '@Model.Id',
                    userId: '@UserManager.GetUserId(User)'
                })
            }).then( () => {
                btnLikeElement.innerHTML = '<i class="bi bi-hand-thumbs-up-fill"></i>';
                btnLikeElement.removeEventListener('click', addLikeForBlog);
                getTotalLikes()
            });
        }
        
        btnLikeElement.addEventListener('click', addLikeForBlog);
    </script>
}
